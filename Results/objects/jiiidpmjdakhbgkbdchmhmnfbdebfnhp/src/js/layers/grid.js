var _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},RULERS=RULERS||{};RULERS.grid={changeHandler:(a,b)=>{RULERS.store.get(["grid"],({grid:c})=>{const d=a.target&&a.target.value||a,e=(a.target&&a.target.name||b.dataset.name).replace("grid-",""),f=isNaN(parseInt(d))?d:parseInt(d);RULERS.store.set({grid:_extends({},c,{[window.location.href]:_extends({},c[window.location.href],{[e]:f})})}),RULERS.vars.grid[e]=f,RULERS.overlay.draw()})},disable:()=>{RULERS.store.get(["grid"],({grid:a})=>{RULERS.store.set({grid:_extends({},a,{[window.location.href]:{"row-toggle":!1,"column-toggle":!1}})})}),RULERS.vars.grid["row-toggle"]=!1,RULERS.vars.grid["column-toggle"]=!1,RULERS.overlay.draw()},draw:({ctx:a,canvas:b})=>{b||(b=a.canvas);const c=RULERS.vars.grid;c&&c["column-toggle"]&&RULERS.grid.drawColumns({ctx:a,canvas:b}),c&&c["row-toggle"]&&RULERS.grid.drawRows({ctx:a,canvas:b}),c&&c["column-toggle"]&&c["row-toggle"]&&RULERS.grid.drawBlocks({ctx:a,canvas:b})},drawColumns:({ctx:a,canvas:b})=>{const c=RULERS.vars.grid,d=c["column-count"]*(c["column-width"]+c["gutter-width"])+c["gutter-width"],{correctSize:e}=RULERS.helpers,{scrollPos:f}=RULERS.vars,{height:g,width:h}=b;let j=f.x,k=c["horizontal-offset"];if("center"===c["column-alignment"]){const a=h/2/RULERS.vars.scale;j=a-d/2-f.x}else"right"===c["column-alignment"]&&(j=h/RULERS.vars.scale-d-f.x,k*=-1);j+=k;const l=()=>{a.save(),a.strokeStyle=RULERS.themes.color("orange"),a.setLineDash([e(3),e(2)]),a.beginPath(),a.moveTo(e(j),0),a.lineTo(e(j),g),a.stroke(),a.restore()};l();for(let d=0;d<c["column-count"];d++)j+=c["gutter-width"],l(),j+=c["column-width"],l();j+=c["gutter-width"],l()},drawRows:({ctx:a,canvas:b})=>{const c=RULERS.vars.grid,{height:d,width:e}=b,{correctSize:f}=RULERS.helpers,{scrollPos:g}=RULERS.vars;let h=c["top-offset"],j=0;for(const i=b=>{a.save(),a.strokeStyle=RULERS.themes.color("white",.3),a.beginPath(),a.moveTo(0,f(b-g.y)),a.lineTo(e,f(b-g.y)),a.stroke(),a.strokeStyle=RULERS.themes.color("orange"),a.setLineDash([f(3),f(2)]),a.beginPath(),a.moveTo(0,f(b-g.y)),a.lineTo(e,f(b-g.y)),a.stroke(),a.restore()};h<d+g.y;)i(h),h+=c[j%2?"gutter-height":"row-height"]||0,j++},drawBlocks:({ctx:a,canvas:b})=>{const c=RULERS.vars.grid,{correctSize:d}=RULERS.helpers,{height:e,width:f}=b,{scrollPos:g}=RULERS.vars,h=c["column-count"]*(c["column-width"]+c["gutter-width"])+c["gutter-width"];a.save(),a.fillStyle=RULERS.themes.color("orange",.1);const j=()=>{a.fillRect(d(m-g.x),d(n-g.y),d(c["column-width"]),d(c["row-height"]))};let k=c["gutter-width"],l=c["horizontal-offset"];if("center"===c["column-alignment"]){const a=RULERS.vars.el.overlay.width/2/RULERS.vars.scale;k=a-h/2+c["gutter-width"]}else"right"===c["column-alignment"]&&(k=f/RULERS.vars.scale-h+c["gutter-width"],l*=-1);k+=l;let m=k,n=c["top-offset"];for(;n<e+g.y;){m=k;for(let a=0;a<c["column-count"];a++)j(),m+=c["column-width"]+c["gutter-width"];n+=c["row-height"]+c["gutter-height"]}a.restore()}};